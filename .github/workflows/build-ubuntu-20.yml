name: Build Ubuntu 20.04

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04

    steps:
    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt-get install ninja-build doxygen graphviz libcurl4-openssl-dev libprotobuf-dev libprotoc-dev protobuf-compiler libhdf5-dev qt5-default
        sudo apt-get install jq clang-tidy

    - name: Install Cap'n Proto
      run: |
        mkdir "${{ runner.workspace }}/capnp"
        cd "${{ runner.workspace }}/capnp"
        curl -O https://capnproto.org/capnproto-c++-0.9.0.tar.gz
        tar zxf capnproto-c++-0.9.0.tar.gz
        cd capnproto-c++-0.9.0
        ./configure
        make -j
        sudo make install

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: Install Python requirements
      shell: bash
      run: |
        sudo pip3 install -r "$GITHUB_WORKSPACE/requirements.txt"

    - name: CMake
      run: |
        export CC=/usr/bin/gcc-9
        export CXX=/usr/bin/g++-9
        mkdir "${{ runner.workspace }}/ecal/_build"
        cd $_
        cmake .. -G "Ninja" \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DHAS_HDF5=ON \
        -DHAS_QT5=ON \
        -DHAS_CURL=ON \
        -DHAS_CAPNPROTO=ON \
        -DBUILD_DOCS=ON \
        -DBUILD_APPS=ON \
        -DBUILD_SAMPLES=ON \
        -DBUILD_TIME=ON \
        -DBUILD_PY_BINDING=ON \
        -DBUILD_STANDALONE_PY_WHEEL=ON \
        -DBUILD_CSHARP_BINDING=OFF \
        -DBUILD_ECAL_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INCLUDE_PY_SAMPLES=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=ON \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON \
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON \
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON \
        -DECAL_THIRDPARTY_BUILD_CURL=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_HDF5=OFF \
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON \
        -DECAL_THIRDPARTY_BUILD_TCPUB=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_SYSCONFDIR=/etc \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LOCALSTATEDIR=/var \
        -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu
        sudo mkdir /etc/ecal
        sudo cp "$GITHUB_WORKSPACE/ecal/core/cfg/ecal.ini" /etc/ecal
      shell: bash

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/ecal/_build

    - name: Build Python Wheel
      run: cmake --build . --target create_python_wheel --config Release
      working-directory: ${{ runner.workspace }}/ecal/_build

    - name: Run Tests
      run: ctest -V
      working-directory: ${{ runner.workspace }}/ecal/_build

    - name: Pack
      run: cpack -G DEB
      working-directory: ${{ runner.workspace }}/ecal/_build

    - name: Upload Debian
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-debian
        path: ${{ runner.workspace }}/ecal/_build/_deploy/*.deb

    - name: Upload Python Wheel
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-python-wheel
        path: ${{ runner.workspace }}/ecal/_build/_deploy/*.whl

    #---------------------------------------------------------------------------

    - name: 'Create a tarball'
      run: cd ${{ runner.workspace }} && tar -czf ecal.tar.gz ecal/

    # https://github.com/actions/upload-artifact
    - name: Upload the whole directory
      uses: actions/upload-artifact@v3
      with:
        name: ecal-dir.tar.gz
        path: ${{ runner.workspace }}/ecal.tar.gz

    #---------------------------------------------------------------------------

    # https://github.com/Ana06/get-changed-files
    - name: Detect the changeset
      id: changed_files
      uses: Ana06/get-changed-files@v2.1.0

    # see: ./build.sh --help
    - name: Run clang-tidy on the changeset
      id: suffix
      run: |
        build_linux/clang-tidy/build.sh -a -f ${{ steps.changed_files.outputs.added_modified }}

    # https://github.com/actions/upload-artifact
    # If clang-tidy is never called, artifact upload will fail (no log files) with just a warning.
    - name: Archive logs as artifact
      uses: actions/upload-artifact@v3
      with:
        name: logs_${{ steps.suffix.outputs.timestamp }}
        path: _build/log_*.txt
        if-no-files-found: warn

    # https://github.com/mxschmitt/action-tmate#only-on-failure
    # To debug failures, use either the Web shell link or SSH to the address given on this step,
    # and press 'Q' or 'Ctrl+C' to continue.
    - name: Setup SSH session
      #if: ${{ always() }}
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3.11
      with:
        sudo: true

  #---------------------------------------------------------------------------

  call-clang-tidy-download:
    needs: build-ubuntu
    uses: ./.github/workflows/run-clang-tidy-download.yml
